{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/user-video.service.ts","webpack:///src/app/socket-service.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/user.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","AppComponent","socketService","userVideoService","connections","screenCapEnabled","sources","messages","subscribe","d","currentChannel","channel","streamUrl","getUserScreen","screen","getVideoTracks","addEventListener","enableUserCam","playStream","userWindow","userCam","connection","confirm","updateChannel","sendMessage","name","message","elRef","stream","videoWindow","nativeElement","srcObject","muted","play","length","clearUrl","updateStream","selector","templateUrl","styleUrls","read","AppModule","declarations","imports","providers","bootstrap","UserVideoService","navigator","mediaDevices","enumerateDevices","videoStreams","isVideoAvailable","some","kind","getUserMedia","video","audio","echoCancellation","displayMediaOptions","cursor","md","getDisplayMedia","configuration","offerToReceiveAudio","offerToReceiveVideo","iceServers","urls","RTCPeerConnection","providedIn","SocketServiceService","http","sanitizer","connectionsSubject","asObservable","channelSubject","camEnabled","getSocket","setupListeners","socket","emit","push","window","on","console","log","next","data","from","offer","allUsers","find","u","sessionId","peerConnection","createPeerConnection","streams","getTracks","forEach","track","addTrack","getFeed","then","f","tracks","senders","getSenders","s","t","replaceTrack","onconnectionstatechange","event","onicecandidate","candidate","id","setRemoteDescription","RTCSessionDescription","createAnswer","answer","setLocalDescription","remoteDesc","iceCandidate","addIceCandidate","filter","session","createOffer","idx","findIndex","splice","routes","AppRoutingModule","forRoot","exports","UserService","userId","userName","split","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {\n  Component,\n  ViewChildren,\n  ViewChild,\n  ElementRef,\n  AfterViewChecked,\n  SimpleChanges,\n  OnInit,\n} from \"@angular/core\";\nimport {\n  SocketServiceService,\n  IConnection,\n  IMessage,\n} from \"./socket-service.service\";\nimport { UserVideoService } from \"./user-video.service\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent implements OnInit {\n  public connections: IConnection[] = [];\n  public userCam: any;\n  public screenCapEnabled = false;\n  public sources: MediaDeviceInfo[] = [];\n  public streamUrl: string;\n  public name: string;\n  public message: string;\n  public messages: IMessage[] = [];\n\n  public get EnableVideoToggle() {\n    return this.sources.length > 1;\n  }\n\n  @ViewChild(\"userWindow\", { static: false, read: ElementRef })\n  private userWindow: ElementRef;\n\n  // @ViewChildren(\"videoStreams\")\n  // private videoStreamsWindows: ElementRef[];\n\n  constructor(\n    private socketService: SocketServiceService,\n    private userVideoService: UserVideoService\n  ) {\n    this.socketService.connections.subscribe((d) => {\n      this.connections = d;\n    });\n    this.socketService.currentChannel.subscribe((channel) => {\n      this.streamUrl = channel;\n    });\n    // this.userVideoService.getFeed().then((cam) => {\n    //   this.userCam = cam;\n    //   this.playStream(this.userWindow, cam);\n    // });\n  }\n\n  // public ngAfterViewChecked(): void {\n  //   this.videoStreamsWindows.forEach((s) => {\n  //     if (!s.nativeElement.srcObject) {\n  //       const c = this.connections.find(\n  //         (connection) => connection.sessionId === s.nativeElement.id\n  //       );\n  //       s.nativeElement.srcObject = c.stream;\n  //     }\n  //   });\n  // }\n\n  public ngOnInit() {\n    this.messages = this.socketService.messages;\n  }\n\n  public enableScreenCapture() {\n    this.screenCapEnabled = true;\n    this.userVideoService.getUserScreen().subscribe((screen: any) => {\n      screen.getVideoTracks()[0].addEventListener(\"ended\", () => {\n        this.enableUserCam();\n      });\n      this.playStream(this.userWindow, screen);\n    });\n  }\n\n  public enableUserCam(): void {\n    this.screenCapEnabled = false;\n    this.playStream(this.userWindow, this.userCam);\n  }\n\n  public showConnections(connection?: any): void {\n    if (connection) {\n    } else {\n    }\n  }\n\n  public clearUrl(): void {\n    this.streamUrl = \"\";\n  }\n\n  public updateStream(): void {\n    if (confirm(\"Update Current Channel\")) {\n      this.socketService.updateChannel(this.streamUrl);\n\n      this.socketService.sendMessage({\n        name: \"ROBO\",\n        message: `${this.name || \"Anonymous\"} changed the video to ${\n          this.streamUrl\n        }`,\n      });\n    }\n  }\n\n  public sendMessage(): void {\n    if (this.message) {\n      this.socketService.sendMessage({\n        name: this.name,\n        message: this.message,\n      });\n    }\n    this.message = \"\";\n  }\n\n  private playStream(elRef: ElementRef, stream: any): void {\n    const videoWindow = elRef.nativeElement;\n    videoWindow.srcObject = stream;\n    videoWindow.muted = true;\n    videoWindow.play();\n    videoWindow.addEventListener(\"ended\", () => {});\n  }\n}\n","<mat-card>\n  <mat-card-header>\n    <mat-card-title>Stream Camera Client</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <mat-form-field appearance=\"fill\" style=\"width: 90vw\">\n      <mat-label>Name</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        [(ngModel)]=\"name\"\n        [ngModelOptions]=\"{ standalone: true }\"\n      />\n    </mat-form-field>\n    <br />\n\n    <mat-form-field appearance=\"fill\" style=\"width: 90vw\">\n      <mat-label>Current Channel</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        [(ngModel)]=\"streamUrl\"\n        [ngModelOptions]=\"{ standalone: true }\"\n      />\n    </mat-form-field>\n    <br />\n    <button mat-raised-button (click)=\"clearUrl()\">Clear</button>\n    <button mat-raised-button (click)=\"updateStream()\">Update Stream</button>\n\n    <br />\n\n    <div class=\"chat-wrapper\">\n      <div class=\"chat-box\">\n        <ng-container *ngFor=\"let m of messages\">\n          <span style=\"font-style: italic\">{{ m.name || \"anonymous\" }}</span\n          ><span> : {{ m.message }}</span\n          ><br />\n        </ng-container>\n      </div>\n    </div>\n\n    <form (submit)=\"sendMessage()\" style=\"margin-top: 2em\">\n      <mat-form-field appearance=\"fill\" style=\"width: 60vw\">\n        <mat-label>Message</mat-label>\n        <input\n          matInput\n          type=\"text\"\n          [(ngModel)]=\"message\"\n          [ngModelOptions]=\"{ standalone: true }\"\n        />\n      </mat-form-field>\n      <button mat-raised-button type=\"submit\" style=\"margin-left: 1em\">\n        Send\n      </button>\n    </form>\n  </mat-card-content>\n</mat-card>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatIconModule } from \"@angular/material/icon\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\nimport { SocketServiceService } from \"./socket-service.service\";\nimport { UserVideoService } from \"./user-video.service\";\nimport { UserService } from \"./user.service\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n  ],\n  providers: [SocketServiceService, UserVideoService, UserService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from \"@angular/core\";\nimport { from, Observable, ReplaySubject } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserVideoService {\n  constructor() {}\n\n  public async getFeed() {\n    const videoStreams = await navigator.mediaDevices.enumerateDevices();\n    const isVideoAvailable = videoStreams.some((d) => d.kind === \"videoinput\");\n\n    return await navigator.mediaDevices.getUserMedia({\n      video: isVideoAvailable,\n      audio: {\n        echoCancellation: true,\n      },\n    });\n  }\n\n  public getUserScreen() {\n    const displayMediaOptions = {\n      video: {\n        cursor: \"always\",\n      },\n      audio: false,\n    };\n\n    const md: any = navigator.mediaDevices;\n    return from(md.getDisplayMedia(displayMediaOptions));\n  }\n\n  public createPeerConnection() {\n    const configuration = {\n      configuration: {\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      },\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n    };\n    return new RTCPeerConnection(configuration);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport * as io from \"socket.io-client\";\nimport { ReplaySubject, Subject } from \"rxjs\";\nimport { UserVideoService } from \"./user-video.service\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SocketServiceService {\n  public sessionId: string;\n  public allUsers: IConnection[];\n  public connectionsSubject = new Subject<IConnection[]>();\n  public connections = this.connectionsSubject.asObservable();\n  public channelSubject = new ReplaySubject<string>();\n  public currentChannel = this.channelSubject.asObservable();\n  public messages: IMessage[] = [];\n\n  private socket: any;\n  private camEnabled = false;\n\n  constructor(\n    private http: HttpClient,\n    private userVideoService: UserVideoService,\n    private sanitizer: DomSanitizer\n  ) {\n    this.getSocket();\n    this.setupListeners();\n  }\n\n  updateChannel(channel: string) {\n    this.socket.emit(\"updateChannel\", channel);\n  }\n\n  sendMessage(message: IMessage) {\n    this.messages.push(message);\n    this.socket.emit(\"sendMessage\", message);\n  }\n\n  getSocket() {\n    this.socket = window[\"socketIo\"]();\n    this.socket.on(\"connect\", () => {});\n  }\n\n  setupListeners() {\n    this.socket.on(\"channelJoined\", () => {\n      console.log(\"channel joined\");\n      // this.socket.emit(\"registerClient\", {});\n    });\n\n    this.socket.on(\"currentChannel\", (channel) => {\n      this.channelSubject.next(channel);\n    });\n\n    this.socket.on(\"sendMessage\", (message: IMessage) => {\n      this.messages.push(message);\n    });\n\n    this.socket.on(\"sessionId\", (data) => {});\n\n    if (this.camEnabled) {\n      this.socket.on(\"offer\", async (from, offer) => {\n        const connection = this.allUsers.find((u) => u.sessionId === from);\n        if (connection) {\n          connection.peerConnection =\n            this.userVideoService.createPeerConnection();\n\n          const videoStreams = await navigator.mediaDevices.enumerateDevices();\n          const isVideoAvailable = videoStreams.some(\n            (d) => d.kind === \"videoinput\"\n          );\n\n          const streams = await navigator.mediaDevices.getUserMedia({\n            video: isVideoAvailable,\n            audio: {\n              echoCancellation: true,\n            },\n          });\n          streams.getTracks().forEach((track) => {\n            connection.peerConnection.addTrack(track, streams);\n          });\n\n          this.userVideoService.getFeed().then((f) => {\n            const tracks = f.getTracks();\n            const senders = connection.peerConnection.getSenders();\n            senders.forEach((s) => {\n              const track = tracks.find((t) => t.kind === s.track.kind);\n              s.replaceTrack(track);\n            });\n          });\n\n          connection.peerConnection.onconnectionstatechange = (event) => {};\n          connection.peerConnection.onicecandidate = (event) => {\n            if (event.candidate) {\n              this.socket.emit(\n                \"iceCandidate\",\n                connection.sessionId,\n                this.socket.id,\n                event.candidate\n              );\n            }\n          };\n          connection.peerConnection.setRemoteDescription(\n            new RTCSessionDescription(offer)\n          );\n          // connection.peerConnection.ontrack = (event: RTCTrackEvent) => {\n          //   connection.stream.addTrack(event.track);\n          // };\n          const answer = await connection.peerConnection.createAnswer();\n          await connection.peerConnection.setLocalDescription(answer);\n          this.socket.emit(\n            \"answer\",\n            connection.sessionId,\n            this.socket.id,\n            answer\n          );\n        }\n      });\n\n      this.socket.on(\"answer\", async (from, answer) => {\n        const connection = this.allUsers.find((u) => u.sessionId === from);\n        const remoteDesc = new RTCSessionDescription(answer);\n        // connection.peerConnection.ontrack = (event: RTCTrackEvent) => {\n        //   connection.stream.addTrack(event.track);\n        // };\n        await connection.peerConnection.setRemoteDescription(remoteDesc);\n      });\n\n      this.socket.on(\"iceCandidate\", async (from, iceCandidate) => {\n        const connection = this.allUsers.find((u) => u.sessionId === from);\n        if (iceCandidate) {\n          try {\n            await connection.peerConnection.addIceCandidate(iceCandidate);\n          } catch (e) {\n            // ignore errors\n          }\n        }\n      });\n\n      this.socket.on(\"allStreamers\", (data) => {\n        data = data.filter((session) => session.sessionId !== this.socket.id);\n        data.forEach(async (d) => {\n          d.peerConnection = this.userVideoService.createPeerConnection();\n          const streams = await navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: {\n              echoCancellation: true,\n            },\n          });\n          streams.getTracks().forEach((track) => {\n            d.peerConnection.addTrack(track, streams);\n          });\n          d.peerConnection.onconnectionstatechange = (event) => {};\n          d.peerConnection.onicecandidate = (event) => {\n            if (event.candidate) {\n              this.socket.emit(\n                \"iceCandidate\",\n                d.sessionId,\n                this.socket.id,\n                event.candidate\n              );\n            }\n          };\n          const offer = await d.peerConnection.createOffer();\n          await d.peerConnection.setLocalDescription(offer);\n          this.socket.emit(\"offer\", d.sessionId, this.socket.id, offer);\n        });\n        this.allUsers = data;\n        // this.allUsers.forEach((u) => {\n        //   u.stream = new MediaStream();\n        // });\n        this.connectionsSubject.next(data);\n      });\n\n      this.socket.on(\"newStreamerConnected\", (connection) => {\n        // connection.stream = new MediaStream();\n        this.allUsers.push(connection);\n        this.connectionsSubject.next(this.allUsers);\n      });\n\n      this.socket.on(\"userDisconnected\", (sessionId) => {\n        const idx = this.allUsers.findIndex((u) => u.sessionId === sessionId);\n        if (idx > -1) {\n          this.allUsers.splice(idx, 1);\n        }\n        this.connectionsSubject.next(this.allUsers);\n      });\n    }\n  }\n}\n\nexport interface IConnection {\n  sessionId: string;\n  name: string;\n  peerConnection: RTCPeerConnection;\n}\n\nexport interface IMessage {\n  name: string;\n  message: string;\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  public readonly userId: string;\n  public userName: string;\n\n  constructor() {\n    this.userId = uuidv4();\n    this.userName = `Guest[${this.userId.split('-')[0]}]`\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}